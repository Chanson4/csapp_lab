####################################################
# CS:APP 攻击实验室
# 给导师的指示
#
# 版权所有 (c) 2016，R. Bryant 和 D. O'Hallaron
#
####################################################

此目录包含您将用于构建和运行的文件
CS：APP 攻击实验室。

攻击实验室的目的是帮助学生制定详细的
了解 x86-64 处理器上的堆栈规则。它
涉及对一些
可执行文件。代码注入攻击有三种，两种
面向返回的编程攻击。

本实验必须在 x86-64 Linux 系统上进行。它需要以下版本
支持 -Og 优化标志的 gcc（例如，gcc
4.8.1）。我们已经在 CMU 的 Ubuntu 12.4 系统上对其进行了测试。

************
1. 概述
************

----
1.1. 目标
----
学生们得到了名为 ctarget 和 rtarget 的二进制文件，它们有一个
缓冲区溢出漏洞。他们被要求改变他们的
通过五种难度逐渐增加的攻击手段，攻击目标。三次攻击
ctarget 使用代码注入。对 rtarget 的两次攻击使用
面向返回的编程。

----
1.2. 解决目标
----
每次攻击都涉及从标准输入读取一系列字节
进入存储在堆栈上的缓冲区。学生对每个漏洞字符串进行编码
以空格分隔的十六进制数字对序列，其中每个
十六进制数字对代表漏洞字符串中的一个字节。程序
“hex2raw”将这些字符串转换为原始字节序列，
然后可以将其输入到目标：
 
    unix> cat exploit.txt | ./hex2raw | ./ctarget

每个学生都会获得自己定制的 ctarget 副本，并且
rtarget。因此，学生必须自己开发解决方案，
不能使用其他学生的解决方案。

实验室报告对每个阶段和解决方案都有详细的说明
技术。我们建议您在之前仔细阅读这篇文章
继续这个 README 文件。

----
1.3. 自动评分服务
----

与 Bomb 和 Buffer 实验室一样，我们创建了一个独立的
处理攻击各个方面的用户级自动评分服务
实验室为您准备：学生从服务器下载他们的目标。
学生们努力实现自己的目标，每个成功的解决方案都会被直播
返回服务器。显示每个目标的当前结果
在网络“记分牌”上。没有明确的作业，实验室是
自我评分。

自动评分服务由四个用户级程序组成，它们运行
在主 ./attacklab 目录中：

- 请求服务器 (attacklab-requestd.pl)。学生下载他们的
通过将浏览器指向一个简单的
HTTP 服务器称为“请求服务器”。请求服务器构建
目标文件，将其存档在 tar 文件中，然后上传生成的 tar
文件返回到浏览器，可以保存在磁盘上并
解压后，请求服务器还会创建目标及其
在targets/目录中为讲师提供解决方案。

- 结果服务器 (attacklab-resultd.pl)。每次学生正确
解决目标阶段，目标发送一条简短的 HTTP 消息，称为
“自动结果字符串”，发送到 HTTP“结果服务器”，后者只是简单地附加
自动结果字符串到名为 log.txt 的“记分牌日志文件”。

- 报告守护进程 (attacklab-reportd.pl)。“报告守护进程”
定期扫描记分板日志文件。报告守护进程会发现
每个学生提交的最新自动结果字符串
阶段，并通过将这些字符串应用到
学生的目标。然后它会更新 HTML 记分牌
（attacklab-scoreboard.html）总结了当前
每个目标的解决方案，按累计总数排序
點。

- 主守护进程 (attacklab.pl)。“主守护进程”启动并守护
请求服务器、结果服务器和报告守护进程，确保
在任何时候，这些进程中只有一个进程（及其本身）正在运行
时间。如果其中一个进程因某种原因死亡，主守护进程
检测到此情况并自动重新启动。主守护进程是
唯一您实际需要运行的程序。

********
2. 文件
********
./attacklab 目录包含以下文件：

Makefile - 用于启动/停止实验室和清理文件
attacklab.pl* - 守护其他服务器和守护进程的主守护进程
Attacklab.pm——Attacklab 配置文件   
attacklab-reportd.pl* - 报告守护进程，持续更新记分牌
attacklab-requestd.pl* - 向学生提供目标的请求服务器
attacklab-resultd.pl* - 从目标获取自动结果字符串的结果服务器
attacklab-scoreboard.html - 实时网络记分牌
attacklab-update.pl - 帮助 attacklab-reportd.pl 更新记分牌
目标/-包含为每个学生生成的独特目标及其解决方案
log-status.txt-包含来自各种服务器和守护进程的消息的状态日志
log.txt - 从目标收到的自动结果的记分板日志
scores.csv - 总结每个学生的当前记分牌分数
src/-Attacklab 源文件
verify.pl - 由报告守护程序定期调用。验证解决方案
                          为每个学生更新记分牌和分数文件。
writeup/ - 样本 Latex 攻击实验室 writeup



************
3.解决方案
************

TargetID：实验室给定实例中的每个目标都有唯一的
非负整数，称为“targetID”。

目标 n 的五个解决方案可在
target/target<n> 目录中，有以下文件：

第一阶段：ctarget.l1，
第二阶段：ctarget.l2，
第 3 阶段：ctarget.l3，
阶段 4：rtarget.l2，
阶段 5：rtarget.l3，

其中“l”代表级别。

****************************
4. 提供攻击实验室
****************************

攻击实验室有两种基本形式：在“在线”
版本中，教师使用自动评分服务来分发自定义
按需为每个学生设定目标，并自动跟踪他们的
实时记分牌上的进度。在“离线”版本中，
教师手动制定、分发和评分学生目标，
无需使用自动评分服务。

虽然两个版本都为学生提供了丰富的体验，但我们建议
在线版本。对于
这对学生来说是最容易的，对老师来说也是最容易评分的。然而，
要求您保持自动评分服务不间断运行，
因为讲义、评分和报告是连续发生的
实验室的持续时间。我们让运行服务变得非常简单，但是
有些教练可能对这个要求感到不舒服，并且会
选择离线版本。

以下是提供两个版本实验室的说明。

---
4.1. 创建一个干净的攻击实验室目录
---

确定您将在其中创建
攻击实验室目录（./attacklab），如果你提供在线
版本，将运行自动评分服务。你只需要有一个用户
在该机器上创建帐户。您不需要 root 访问权限。

机器必须是 x86-64 并且具有相对较新版本的 gcc
支持 -Og 优化标志（例如，gcc 4.8.1）。

攻击实验室的每个产品都必须以全新的 ./attacklab 开始
$SERVER_NAME 上的目录。例如：

    linux> tar xvf 攻击实验室.tar
    linux> cd 攻击实验室
    linux> 制作 cleanallfiles

---
4.2 配置攻击实验室
---

如果您提供在线版本，则需要编辑
以下文件：

./Attacklab.pm - 这是主配置文件。你只需要
修改或检查此文件第 1 节中的几个变量。每个
变量前面有一个描述性注释。

./src/build/config.c - 此文件提供课程编号并列出
允许目标在其上运行的主机的域名。
确保你正确更新了它，否则你和你的学生将不会
能够运行您的目标。您应该包括 $SERVER_NAME（计算机
运行攻击实验室服务器）以及任何机器
您的学生可以提交。

./src/build/driverhdrs.h - 此文件提供 SERVER_NAME，其中
攻击实验室服务器正在运行。它必须与
Attacklab.pm 中的 $SERVER_NAME。

----
4.3. 更新实验室记录
----

修改 ./writeup/attacklab.tex 中的 Latex 实验室记录，以适应你的
环境。然后在 ./writeup 目录中输入以下内容：

	unix> 进行清理；

----
4.4. 提供在线攻击实验室
----

------
4.4.1. 简短版本
------
从 ./attacklab 目录：

（1）输入以下命令重置攻击实验室
    linux> 制作 cleanallfiles

（2）输入以下命令启动自动评分服务
    Linux> 启动

（3）输入以下命令停止自动评分服务
    Linux> 停止    

您可以随时启动和停止自动评分服务
不会丢失任何信息。如有疑问，请“make stop; make start”
将使一切处于稳定状态。

但是，重置实验室会删除所有旧目标、状态日志和
记分牌日志。仅在调试期间或第一次执行此操作
你为你的学生启动实验室。

学生通过将浏览器指向
    http://$服务器名称:15513/

学生通过将浏览器指向      
    http://$SERVER_NAME:15513/记分板

其中 $SERVER_NAME 在 Attacklab.pm 中定义。

------
4.4.2. 长版本
------

（1）重置攻击实验室。“make stop”确保没有
服务器正在运行。“make cleanallfiles”从头开始重置实验室，
删除特定实验室实例的所有数据，例如
作为状态日志，请求服务器创建的所有目标，以及
记分板日志。当你准备好让实验室“上线”时，请执行此操作
学生。

在准备实验时，重置也很有用。在
实验室上线后，您需要为自己请求几个目标，运行
他们，解决几个阶段（使用提供给讲师的解决方案
在目标目录中），并确保结果
正确显示在记分牌上。如果出现问题（比如
因为你忘记更新目标机器列表
允许在 src/build/config.c 中运行）你停止服务器，修复
配置，重置实验室，然后请求并运行更多测试
目 标。

警告：如果你在实验室上线后重置实验室，你将失去所有
记录学生的目标及其解决方案。你将无法
验证学生的作业。你的学生必须获得
新的目标并重新开始。

（2）启动攻击实验室。“make start”运行attacklab.pl，它是主
启动并管理服务中其他程序的守护进程，
每隔几秒检查一次它们的状态，如果
必要的：

（3）停止攻击实验室。“make stop”会终止所有正在运行的
服务器。您可以随时启动和停止自动评分服务
你喜欢而不丢失任何信息。如有疑问，“请停止；
make start” 将使一切处于稳定状态。

请求服务器：请求服务器是一个简单的专用 HTTP
服务器（1）构建并向学生浏览器提供自定义目标
按需显示，（2）显示实时
記分牌。

学生从请求守护进程请求一个目标，分为两个
步骤：首先，学生将他们最喜欢的浏览器指向

    http://$服务器名称:15513/

例如，http://foo.cs.cmu.edu:15513/。请求服务器
通过向浏览器发送 HTML 表单来响应。接下来，
学生填写此表格，提供其用户名和电子邮件地址，并且
然后提交表单。请求服务器解析表单，构建并
tar 一个 targetID=n 的目标，并将 tar 文件发送到
浏览器。然后学生将 tar 文件保存到磁盘。当学生
解压此文件，它会创建一个目录 (./target<n>)，其中包含
以下文件：

README.txt：描述目录内容的文件。

ctarget：容易受到代码注入攻击的可执行程序。

rtarget：一个易受返回导向攻击的可执行程序
    编程攻击。

cookie.txt：一个 8 位十六进制代码，用作 cookie 的唯一标识符
    提交给结果服务器的攻击。

farm.c：该目标的“小工具农场”的源代码，包括
    用于生成面向返回的编程攻击。

hex2raw：生成攻击字符串的实用程序。

请求服务器还创建一个目录（attacklab/targets/target<n>）
其中包含这些文件以及五个阶段中的每个阶段的解决方案。
有关详细信息，请参阅targets/target<n>/README.txt。

结果服务器：每当学生成功解决一个阶段时，
目标发送一个 HTTP 消息（称为自动结果字符串）到
结果服务器，然后将消息附加到记分板
日志。每条消息包含一个目标 ID、阶段编号和
利用字符串。

报告守护进程：报告守护进程定期抓取记分牌
日志，验证每个目标的最新提交，以及
根据分数排序的结果更新网络记分牌，并
提交时间。它还会创建一个 CSV 文件，其中包含每个
学生。更新频率是
攻击实验室.pm.

教师和学生通过将他们的
浏览器：

    http://$SERVER_NAME:15513/记分板

------
4.4.3. 在线攻击实验室评分
------

在线攻击实验室是自我评分的。在任何时候，CSV
文件 ./attacklab/scores.csv 包含每个攻击的最新分数
学生。此文件由报告守护程序在每次
生成一个新的记分牌。


------
4.4.4. 在线攻击实验室的附加说明
------

* 由于请求服务器和报告守护程序都需要执行
  目标，您必须在合法机器列表中包含 $SERVER_NAME
  在你的 attacklab/src/build/config.c 文件中。

* 所有的服务器和守护进程都是无状态的，所以你可以停止（“make
  根据需要多次运行 (“stop”) 和 (“make start”) 实验室程序
  没有任何不良影响。如果你不小心杀死了其中一个
  守护进程，或者你修改了守护进程，或者守护进程由于某种原因死亡，
  然后使用“make stop”进行清理，然后使用“make”重新启动
  启动”。如果你的 Linux 机器崩溃或者重启，只需重启
  使用“make start”启动守护进程。

* 来自服务器的信息和错误消息附加到
  attack/log-status.txt 中的“状态日志”。服务器运行安静，因此
  可以在启动时从 initrc 脚本启动。

* 有关以下详细信息，请参阅 src/build/ 和 src/solve 中的 README 文件
  如何构建和解决目标。不是必需的，但包括在内
  为了完整性。

* 在与学生开始上线之前，我们希望检查所有内容
  通过运行一些测试。我们通过输入以下内容来执行此操作：

    linux> 制作 cleanallfiles   
    Linux> 启动

然后我们通过将 Web 浏览器指向

    http://$服务器名称:15513

将目标保存到磁盘后，我们将其解压，复制到
src/build/config.c 中的批准列表，然后使用
target/target<n> 中的解决方案文件：ctarget.l1、ctarget.l2、
ctarget.l3、rtarget.l2 和 rtarget.l3。
 
然后我们检查记分牌看它是否被正确更新：
记录在记分牌上，我们检查

    http://$SERVER_NAME:15513/记分板

一旦我们确认一切正常，我们就会停止实验

    Linux> 停止

然后开始直播：

    linux> 制作 cleanallfiles
    Linux> 启动
        
一旦我们开始上线，我们就会尽可能多地输入“make stop”和“make start”
需要，但我们小心不再输入“make cleanallfiles”。

----
4.5. 提供离线攻击实验室
----

在此版本的实验室中，您可以手动构建自己的自定义目标，并
然后分发给学生。学生要努力解决
他们的目标离线（即独立于任何自动评分服务）
然后把解决方案文件交给你，每个文件你都要评分
通过将漏洞字符串输入到学生的
目 标。

你可以使用 src/build/buildtarget.pl 手动生成目标
脚本，必须从 src/build 目录运行。例如，
为用户 bovik 生成目标 2：

    linux> cd src/build
    Linux> ./buildtarget.pl -u bovik -t 2

这将生成一个名为targets/target2.tar的文件，然后你可以
发给学生。  

学生需要使用 -q 选项运行 ctarget 和 rtarget，
它告诉目标不要尝试联系（不存在的）
评分服务器。

学生将提交最多五个漏洞字符串：bovik-ctarget.l1，
bovik-ctarget.l2、bovik-ctarget.l3、bovik-rtarget.l2 和
bovik-rtarget.l3. 你可以通过将每个漏洞输入到
target/target2 目录中的 ctarget 或 rtarget 程序。对于
例子：

    linux> cat bovik-ctarget.l3 | ./src/hex2raw | ./targets/target2/ctarget -q
    linux> cat bovik-rtarget.l2 | ./src/hex2raw | ./targets/target2/rtarget -q


 
